# -*- coding: utf-8 -*-
"""cifar10_classification

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F7fdD74ulSgp6hd1yD2AUOCtHAmzNvqU
"""

from keras.datasets import cifar10
import matplotlib.pyplot as plt

(train_x,train_y),(test_x,test_y)= cifar10.load_data()

n =6
plt.figure(figsize=(20,10))
for i in range(n):
  plt.subplot(2,3,1+i)
  plt.imshow(train_x[i])
plt.show()

# import the required layers and modules to create our conv. architecture

from keras.models import Sequential
from keras.layers import Dense,Dropout,Flatten
from keras.constraints import maxnorm
from keras.optimizers import SGD,Adam
from keras.layers.convolutional import Conv2D, MaxPooling2D
from keras.utils import np_utils

# Convert the pixel values of the dataset to float type and
# then normalize the dataset
train_x=train_x.astype("float32")
test_x=test_x.astype("float32")

train_x=train_x/255.0
test_x=test_x/255.0

# Perform the one-hot encoding for target classes
train_y =np_utils.to_categorical(train_y)
test_y=np_utils.to_categorical(test_y)

num_classes=test_y.shape[1]

from keras.layers.serialization import activation
# Create the sequential model and add the layers

model=Sequential()
model.add(Conv2D(32,(3,3),input_shape=(32,32,3),
          padding="same",activation="relu",
          kernel_constraint=maxnorm(3)))
model.add(Dropout(0.2))
model.add(Conv2D(32,(3,3),activation="relu",padding="same",
          kernel_constraint=maxnorm(3)))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Flatten())
model.add(Dense(512,activation="relu",kernel_constraint=maxnorm(3)))
model.add(Dropout(0.5))
model.add(Dense(num_classes,activation="softmax"))

sgd=SGD(lr=0.01,momentum=0.9,decay=(0.01/25),nesterov=False)
model.compile(loss="categorical_crossentropy",optimizer=Adam(),metrics=["accuracy"])

model.summary()

model.fit(train_x,train_y,validation_data=(test_x,test_y),
          epochs=20,batch_size=32)

# calculate its accuracy on testing data
_, acc=model.evaluate(test_x,test_y)
print(acc*100)

model.save("model1_cifar_10epochs.h5")

